branches:
  only:
    - develop
    
environment:
  JAVA_HOME: "C:\\Program Files\\Java\\jdk1.8.0"
  dotnetcore_version: 2.1.302
  nodejs_version: "8"

install:
  - cmd: SET PATH=%PYTHON%;%PYTHON%\Scripts;%JAVA_HOME%\bin;%PATH%
  - cmd: copy "C:\Program Files (x86)\Apache\Maven\bin\mvn.cmd" "C:\Program Files (x86)\Apache\Maven\bin\mvn.bat"

build_script:
  - ps: |
      Function RemoveFileIfExist($fileName) {
          if (Test-Path $fileName) {
              Remove-Item -Force $fileName
          }
      }
      
      Function RemoveFolderIfExist($folderName) {
          if (Test-Path $folderName) {
              Remove-Item -Recurse -Force $folderName
          }
      }
      
      Function DownloadFileFromUrl($url, $destination) {
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile($url, $destination)
      }
      
      Function UpdateMavenPluginVersion($pomLocation, $version) {
          $pomFile = gi $pomLocation
          $pom = [xml](gc $pomFile)
          $pom.project.properties.'azure.functions.maven.plugin.version' = $version
          $pom.Save($pomFile.Fullname)
      }
      
      # Scripts
      $base = $Env:APPVEYOR_BUILD_FOLDER
      $functionCLIPath = "$base\Azure.Functions.Cli"
      $functionCLIZipPath = $functionCLIPath +".zip"
      
      # Download Functions Core Tools
      cd $base
      RemoveFileIfExist $functionCLIZipPath
      RemoveFolderIfExist $functionCLIPath
      DownloadFileFromUrl $Env:FUNCTIONCLI_URL $functionCLIZipPath
      Expand-Archive $functionCLIZipPath -DestinationPath $functionCLIPath
      $Env:Path = $Env:Path + ";$functionCLIPath"
      
      # maven install function maven plguin
      mvn clean install -B
      
      # Generate function project through archetype
      $testProjectBaseFolder = ".\testprojects"
      $testProjectPomLocation = ".\e2etestproject\pom.xml"
      $functionPom = [xml](gc ".\azure-functions-maven-plugin\pom.xml")
      $functionVersion = $functionPom.project.version 
      RemoveFolderIfExist $testProjectBaseFolder
      mkdir $testProjectBaseFolder
      cd $testProjectBaseFolder
      mvn archetype:generate -DarchetypeGroupId="com.microsoft.azure" -DarchetypeArtifactId="azure-functions-archetype" -DarchetypeVersion="$archetypeVersion" -DgroupId="com.microsoft" -DartifactId="e2etestproject" -Dversion="1.0-SNAPSHOT" -Dpackage="com.microsoft" -B
      $testFunctionAppName = ([xml](gc $testProjectPomLocation)).project.properties.functionAppName
      
      echo $testFunctionAppName
      echo $functionPom
      echo $functionVersion
      # Update e2e project pom to use the latest maven plugin
      UpdateMavenPluginVersion $testProjectPomLocation $functionVersion
      mvn -f $testProjectPomLocation clean package
      cd ..
      
      # Run function host
      $Env:FUNCTIONS_WORKER_RUNTIME = "java"
      $Env:AZURE_FUNCTIONS_ENVIRONMENT = "development"
      $Env:AzureWebJobsScriptRoot = "$base\$testProjectBaseFolder\e2etestproject\target\azure-functions\$testFunctionAppName"
      $proc = start-process -filepath "$functionCLIPath\func.exe" -WorkingDirectory "$Env:AzureWebJobsScriptRoot" -ArgumentList "host start" -RedirectStandardOutput "output.txt" -RedirectStandardError "error.txt" -PassThru
      
test_script:
  - ps: |
      $response = curl http://localhost:7071/api/HttpExample?name=CI
      $success = $response.Content -eq "Hello, CI"
      if (-not $success) { exit 1 } 

on_finish:
  - ps: | 
      Stop-Process -Id $proc.Id -Erroraction Ignore
      # Output standard input stream and error stream
      Write-Output "Standard input stream :" (gc ".\output.txt")
      Write-Output "Standard error stream :" (gc ".\error.txt")
